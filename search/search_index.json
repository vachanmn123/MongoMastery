{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#session-1-introduction-to-flask-and-project-setup","title":"Session 1: Introduction to Flask and Project Setup","text":"<ul> <li>Overview of Flask and its use cases</li> <li>Setting Up Development Environment</li> <li>Creating the basic project structure</li> </ul>"},{"location":"#session-2-introduction-to-mongodb","title":"Session 2: Introduction to MongoDB","text":"<ul> <li>Overview of NoSQL databases and MongoDB</li> <li>Setting up MongoDB</li> <li>Basic MongoDB operations using Mongo Shell</li> </ul>"},{"location":"#session-3-creating-the-movie-model-and-basic-crud-operations","title":"Session 3: Creating the Movie Model and Basic CRUD Operations","text":"<ul> <li>Designing the movie model schema</li> <li>Connecting Flask with MongoDB</li> <li>Implementing Read operations in Flask using Flask-PyMongo to interact with MongoDB</li> </ul>"},{"location":"#session-4-jinja2-templating-and-displaying-movies","title":"Session 4: Jinja2 Templating and Displaying Movies","text":"<ul> <li>Introduction to Jinja2 templating engine</li> <li>Creating basic HTML templates for the movie catalogue</li> </ul>"},{"location":"#session-5-adding-cast-and-reviews","title":"Session 5: Adding Cast and Reviews","text":"<ul> <li>Implementing add Movie functionality</li> <li>Implementing Create operations for cast and reviews</li> </ul>"},{"location":"#session-6-updating-and-deleting-movies-cast-and-reviews","title":"Session 6: Updating and Deleting Movies, Cast, and Reviews","text":"<ul> <li>Implementing Update and Delete operations for movies</li> </ul>"},{"location":"#session-7-deployment-and-final-project-review","title":"Session 7: Deployment and Final Project Review","text":"<ul> <li>Preparing the application for deployment<ul> <li>Using a WSGI server (e.g., Gunicorn)</li> </ul> </li> <li>Deploying the Flask app<ul> <li>Deploying to a cloud service like Heroku, AWS, or DigitalOcean</li> </ul> </li> </ul>"},{"location":"Session%201/Creating%20the%20basic%20project%20structure/","title":"Creating the basic project structure","text":""},{"location":"Session%201/Creating%20the%20basic%20project%20structure/#step-1-create-a-new-file-named-apppy","title":"Step 1: Create a new file named <code>app.py</code>","text":"<p>Create a new file named <code>app.py</code> </p>"},{"location":"Session%201/Creating%20the%20basic%20project%20structure/#step-2-add-the-following-code","title":"Step 2: Add the following code","text":"<pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return \"Hello, World!\"\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre>"},{"location":"Session%201/Overview%20of%20Flask%20and%20its%20use%20cases/","title":"Overview of Flask and its use cases","text":""},{"location":"Session%201/Overview%20of%20Flask%20and%20its%20use%20cases/#introduction-to-flask","title":"Introduction to Flask","text":"<ul> <li>Flask is a lightweight web framework for Python.</li> <li>Known for its simplicity and flexibility.</li> <li>Often referred to as a \"micro-framework\" because it doesn't include many built-in tools or libraries.</li> </ul>"},{"location":"Session%201/Overview%20of%20Flask%20and%20its%20use%20cases/#core-features-of-flask","title":"Core Features of Flask","text":"<ul> <li>Minimalist and modular design.</li> <li>Extensive documentation and a large community.</li> <li>Built-in development server and debugger.</li> <li>RESTful request dispatching.</li> <li>Support for secure cookies (client-side sessions).</li> <li>Jinja2 templating engine for dynamic HTML generation.</li> </ul>"},{"location":"Session%201/Overview%20of%20Flask%20and%20its%20use%20cases/#when-to-use-flask","title":"When to Use Flask","text":"<ul> <li>Ideal for small to medium-sized projects.</li> <li>Suitable for prototyping and building MVPs quickly.</li> <li>Excellent for developers who prefer customizing their stack.</li> <li>Great choice for APIs and microservices due to its lightweight nature.</li> </ul>"},{"location":"Session%201/Overview%20of%20Flask%20and%20its%20use%20cases/#popular-use-cases","title":"Popular Use Cases","text":"<ul> <li>Simple Web Applications: Personal blogs, portfolio websites.</li> <li>APIs: Creating RESTful APIs for mobile and web applications.</li> <li>Microservices: Building small, independent services in a microservices architecture.</li> <li>Prototyping: Quickly developing and iterating on new ideas.</li> </ul>"},{"location":"Session%201/Overview%20of%20Flask%20and%20its%20use%20cases/#community-and-ecosystem","title":"Community and Ecosystem","text":"<ul> <li>Large ecosystem of extensions for adding functionality (e.g., Flask-SQLAlchemy, Flask-Login).</li> <li>Active community providing tutorials, plugins, and support.</li> <li>Easy integration with front-end frameworks (e.g., React, Vue.js) and other backend services.</li> </ul>"},{"location":"Session%201/Setting%20Up%20Development%20Environment/","title":"Setting Up Development Environment","text":""},{"location":"Session%201/Setting%20Up%20Development%20Environment/#step-1-verify-python-is-installed","title":"Step 1: Verify Python is installed","text":"<pre><code>python --version\n</code></pre>"},{"location":"Session%201/Setting%20Up%20Development%20Environment/#step-2-create-a-virtual-environment","title":"Step 2: Create a Virtual Environment","text":"<pre><code>python -m venv venv\n</code></pre>"},{"location":"Session%201/Setting%20Up%20Development%20Environment/#step-3-activate-the-virtual-environment","title":"Step 3: Activate the Virtual Environment","text":"<pre><code>venv\\Scripts\\activate\n</code></pre> <p>Note: This command needs to be run every time we start a new terminal instance in order to have access to all the packages we will install later.</p>"},{"location":"Session%201/Setting%20Up%20Development%20Environment/#step-4-install-flask","title":"Step 4: Install Flask","text":"<pre><code>pip install flask\n</code></pre>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/","title":"Basic MongoDB operations using Mongo Shell","text":""},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#1-start-mongo-shell-skip-while-using-mongodb-compass","title":"1. Start Mongo Shell (Skip while using MongoDB Compass)","text":"<p><pre><code>mongo\n</code></pre> - Opens the Mongo Shell where you can run MongoDB commands.</p>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#2-select-a-database","title":"2. Select a Database","text":"<ul> <li>Command:   <pre><code>use &lt;database_name&gt;\n</code></pre></li> <li>Example:   <pre><code>use myDatabase\n</code></pre></li> <li>Details: If the database doesn\u2019t exist, MongoDB will create it when you add data.</li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#3-create-a-collection","title":"3. Create a Collection","text":"<ul> <li>Command:   <pre><code>db.createCollection(\"&lt;collection_name&gt;\")\n</code></pre></li> <li>Example:   <pre><code>db.createCollection(\"movies\")\n</code></pre></li> <li>Details: Collections are created automatically when you first insert data, but you can create them manually if needed.</li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#4-insert-documents","title":"4. Insert Documents","text":"<ul> <li>Command:   <pre><code>db.&lt;collection_name&gt;.insertOne(&lt;document&gt;)\ndb.&lt;collection_name&gt;.insertMany([&lt;document1&gt;, &lt;document2&gt;])\n</code></pre></li> <li>Examples:   <pre><code>db.movies.insertOne({ title: \"Inception\", year: 2010, genre: \"Sci-Fi\" })\ndb.movies.insertMany([\n  { title: \"The Matrix\", year: 1999, genre: \"Sci-Fi\" },\n  { title: \"Interstellar\", year: 2014, genre: \"Sci-Fi\" }\n])\n</code></pre></li> <li>Details: <code>insertOne()</code> adds a single document, <code>insertMany()</code> adds multiple documents.</li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#5-find-documents","title":"5. Find Documents","text":"<ul> <li>Command:   <pre><code>db.&lt;collection_name&gt;.find(&lt;query&gt;)\ndb.&lt;collection_name&gt;.findOne(&lt;query&gt;)\n</code></pre></li> <li>Examples:   <pre><code>db.movies.find() // Retrieve all documents in the collection\ndb.movies.find({ genre: \"Sci-Fi\" }) // Find all Sci-Fi movies\ndb.movies.findOne({ title: \"Inception\" }) // Find a single document matching the query\n</code></pre></li> <li>Details: <ul> <li><code>find()</code> retrieves multiple documents</li> <li><code>findOne()</code> retrieves a single document</li> </ul> </li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#6-update-documents","title":"6. Update Documents","text":"<ul> <li>Command:   <pre><code>db.&lt;collection_name&gt;.updateOne(&lt;query&gt;, &lt;update&gt;)\ndb.&lt;collection_name&gt;.updateMany(&lt;query&gt;, &lt;update&gt;)\n</code></pre></li> <li>Examples:   <pre><code>db.movies.updateOne({ title: \"Inception\" }, { $set: { year: 2011 } }) // Update a single document\ndb.movies.updateMany({ genre: \"Sci-Fi\" }, { $set: { genre: \"Science Fiction\" } }) // Update multiple documents\n</code></pre></li> <li>Details: <ul> <li><code>$set</code> updates the specified fields. </li> <li>Other update operators include:<ul> <li><code>$inc</code> for incrementing</li> <li><code>$push</code> for adding items to arrays</li> </ul> </li> </ul> </li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#7-delete-documents","title":"7. Delete Documents","text":"<ul> <li>Command:   <pre><code>db.&lt;collection_name&gt;.deleteOne(&lt;query&gt;)\ndb.&lt;collection_name&gt;.deleteMany(&lt;query&gt;)\n</code></pre></li> <li>Examples:   <pre><code>db.movies.deleteOne({ title: \"Inception\" }) // Delete a single document\ndb.movies.deleteMany({ genre: \"Sci-Fi\" }) // Delete multiple documents\n</code></pre></li> <li>Details: <ul> <li><code>deleteOne()</code> removes one document</li> <li><code>deleteMany()</code> removes all documents matching the query.</li> </ul> </li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#8-drop-a-collection-danger","title":"8. Drop a Collection (DANGER)","text":"<ul> <li>Command:   <pre><code>db.&lt;collection_name&gt;.drop()\n</code></pre></li> <li>Example:   <pre><code>db.movies.drop()\n</code></pre></li> <li>Details: Removes the entire collection and all its documents.</li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#9-list-all-databases","title":"9. List All Databases","text":"<ul> <li>Command:   <pre><code>show dbs\n</code></pre></li> <li>Details: Lists all databases on the server.</li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#10-list-collections-in-a-database","title":"10. List Collections in a Database","text":"<ul> <li>Command:   <pre><code>show collections\n</code></pre></li> <li>Details: Lists all collections in the currently selected database.</li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#11-count-documents","title":"11. Count Documents","text":"<ul> <li>Command:   <pre><code>db.&lt;collection_name&gt;.countDocuments(&lt;query&gt;)\n</code></pre></li> <li>Example:   <pre><code>db.movies.countDocuments({ genre: \"Sci-Fi\" })\n</code></pre></li> <li>Details: Counts the number of documents matching the query. (If query isnt provided, it returns count of all documents)</li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#12-basic-aggregation","title":"12. Basic Aggregation","text":"<ul> <li>Command:   <pre><code>db.&lt;collection_name&gt;.aggregate([&lt;pipeline_stage1&gt;, &lt;pipeline_stage2&gt;])\n</code></pre></li> <li>Example:   <pre><code>db.movies.aggregate([\n  { $match: { genre: \"Sci-Fi\" } },\n  { $group: { _id: \"$year\", count: { $sum: 1 } } }\n])\n</code></pre></li> <li>Details: Performs complex queries involving multiple stages like <code>$match</code>, <code>$group</code>, and <code>$sort</code>.</li> </ul>"},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#summary-table","title":"Summary Table","text":"Operation Command Example Description Start Mongo Shell <code>mongo</code> Opens the MongoDB Shell. Select a Database <code>use myDatabase</code> Switches to the specified database. Create a Collection <code>db.createCollection(\"movies\")</code> Creates a new collection. Insert Documents <code>db.movies.insertOne({ title: \"Inception\", year: 2010 })</code> Adds new documents to a collection. Find Documents <code>db.movies.find({ genre: \"Sci-Fi\" })</code> Retrieves documents from a collection. Update Documents <code>db.movies.updateOne({ title: \"Inception\" }, { $set: { year: 2011 } })</code> Updates existing documents. Delete Documents <code>db.movies.deleteOne({ title: \"Inception\" })</code> Deletes documents from a collection. Drop a Collection <code>db.movies.drop()</code> Deletes the entire collection. List All Databases <code>show dbs</code> Lists all databases. List Collections <code>show collections</code> Lists all collections in the current database. Count Documents <code>db.movies.countDocuments({ genre: \"Sci-Fi\" })</code> Counts documents matching a query. Basic Aggregation <code>db.movies.aggregate([ { $match: { genre: \"Sci-Fi\" } } ])</code> Performs advanced queries with aggregation stages."},{"location":"Session%202/Basic%20MongoDB%20operations%20using%20Mongo%20Shell/#additional-resources","title":"Additional Resources","text":"<ul> <li>MongoDB Documentation</li> <li>MongoDB Shell Commands</li> <li>[MongoDB Aggregation Framework](https://www.mongodb.com/docs/manual/aggregation/</li> </ul>"},{"location":"Session%202/Overview%20of%20NoSQL%20databases%20and%20MongoDB/","title":"Overview of NoSQL databases and MongoDB","text":""},{"location":"Session%202/Overview%20of%20NoSQL%20databases%20and%20MongoDB/#introduction-to-nosql-databases","title":"Introduction to NoSQL Databases","text":"<ul> <li>Definition: NoSQL stands for \"Not Only SQL.\" These databases are designed to handle large volumes of unstructured or semi-structured data.</li> <li>Types: Includes document stores (e.g., MongoDB), key-value stores (e.g., Redis), column-family stores (e.g., Cassandra), and graph databases (e.g., Neo4j).</li> <li>Flexibility: Unlike relational databases, NoSQL databases do not require a fixed schema, making them ideal for evolving data models.</li> </ul>"},{"location":"Session%202/Overview%20of%20NoSQL%20databases%20and%20MongoDB/#advantages-of-nosql-databases","title":"Advantages of NoSQL Databases","text":"<ul> <li>Scalability: Easily scales horizontally by distributing data across multiple servers.</li> <li>Performance: Optimised for high performance, especially for read and write operations on large datasets.</li> <li>Schema-less: Allows for flexible and dynamic data models.</li> <li>Variety of Data: Can handle different types of data, including JSON, XML, and other formats.</li> </ul>"},{"location":"Session%202/Overview%20of%20NoSQL%20databases%20and%20MongoDB/#introduction-to-mongodb","title":"Introduction to MongoDB","text":"<ul> <li>Document-Oriented: Stores data in flexible, JSON-like documents (BSON format).</li> <li>Schema Flexibility: Documents in a collection can have different fields, allowing for easy updates to the data structure.</li> <li>Rich Query Language: Supports a powerful query language with features like indexing, aggregation, and geospatial queries.</li> <li>High Availability: Provides replication and sharding for high availability and horizontal scalability.</li> </ul>"},{"location":"Session%202/Overview%20of%20NoSQL%20databases%20and%20MongoDB/#key-features-of-mongodb","title":"Key Features of MongoDB","text":"<ul> <li>Document Model: Documents are self-descriptive, making it easier to understand the data.</li> <li>Indexing: Supports various types of indexes to improve query performance.</li> <li>Aggregation Framework: Powerful tool for data aggregation and transformation.</li> <li>Replication: Ensures data redundancy and increases data availability through replica sets.</li> <li>Sharding: Distributes data across multiple servers to handle large datasets and provide horizontal scalability.</li> </ul>"},{"location":"Session%202/Overview%20of%20NoSQL%20databases%20and%20MongoDB/#when-to-use-mongodb","title":"When to Use MongoDB","text":"<ul> <li>Dynamic Schema: Ideal for applications where the data structure is evolving.</li> <li>Big Data: Suitable for handling large volumes of data that require quick access.</li> <li>Real-Time Analytics: Perfect for applications needing real-time data processing and analysis.</li> <li>Content Management: Well-suited for content management systems, catalogs, and event logging.</li> </ul>"},{"location":"Session%202/Overview%20of%20NoSQL%20databases%20and%20MongoDB/#popular-use-cases-for-mongodb","title":"Popular Use Cases for MongoDB","text":"<ul> <li>E-commerce: Product catalogs with varying attributes.</li> <li>Content Management: Blogs, websites, and CMS platforms.</li> <li>Real-Time Analytics: Monitoring and analyzing data in real-time.</li> <li>IoT: Managing data from interconnected devices.</li> </ul>"},{"location":"Session%202/Setting%20up%20MongoDB/","title":"Setting up MongoDB","text":""},{"location":"Session%202/Setting%20up%20MongoDB/#1-sign-up-or-log-in","title":"1. Sign Up or Log In","text":"<ul> <li>Sign Up:</li> <li>Go to MongoDB Atlas.</li> <li>Click on \"Start Free\" to create a new account.</li> <li> <p>Provide your email and create a password or sign up using Google, GitHub, or Microsoft.</p> </li> <li> <p>Log In:</p> </li> <li>If you already have an account, click \"Log In\" and enter your credentials.</li> </ul>"},{"location":"Session%202/Setting%20up%20MongoDB/#2-create-a-new-project","title":"2. Create a New Project","text":"<ul> <li>Step:</li> <li>After logging in, click on \"Projects\" in the left sidebar.</li> <li> <p>Click the \"New Project\" button.</p> </li> <li> <p>Details:</p> </li> <li>Enter a project name and optionally a description.</li> <li>Click \"Next\" to proceed.</li> </ul>"},{"location":"Session%202/Setting%20up%20MongoDB/#3-build-a-new-cluster","title":"3. Build a New Cluster","text":"<ul> <li>Step:</li> <li> <p>In the new project dashboard, click \"Build a Cluster.\"</p> </li> <li> <p>Details:</p> </li> <li>Cloud Provider: Choose a cloud provider (AWS, Google Cloud, or Azure).</li> <li>Region: Select a geographic region for your cluster.</li> <li>Cluster Tier: Choose the free tier (M0 Sandbox) or select a different tier based on your needs.</li> <li> <p>Additional Settings: You can configure options like cluster name and backup settings.</p> </li> <li> <p>Action:</p> </li> <li>Click \"Create Cluster\" to initiate the process.</li> </ul>"},{"location":"Session%202/Setting%20up%20MongoDB/#4-configure-cluster-access","title":"4. Configure Cluster Access","text":"<ul> <li>Step:</li> <li> <p>Add a Database User:</p> <ul> <li>Go to the \"Database Access\" tab.</li> <li>Click \"Add New Database User.\"</li> <li>Create a username and password.</li> <li>Set the user\u2019s database access permissions (read and write to any database is common for development).</li> <li>Click \"Add User.\"</li> </ul> </li> <li> <p>Set Network Access:</p> </li> <li>Go to the \"Network Access\" tab.</li> <li>Click \"Add IP Address.\"</li> <li>Add your IP address or use the \"Allow Access from Anywhere\" option (for development, use 0.0.0.0/0).</li> <li>Click \"Confirm.\"</li> </ul>"},{"location":"Session%202/Setting%20up%20MongoDB/#5-get-connection-string","title":"5. Get Connection String","text":"<ul> <li>Step:</li> <li> <p>Connect to Your Cluster:</p> <ul> <li>Go to the \"Clusters\" tab.</li> <li>Click the \"Connect\" button next to your cluster.</li> <li>Select \"Connect Your Application.\"</li> <li>Copy the connection string provided.</li> </ul> </li> <li> <p>Details:</p> </li> <li>Replace <code>&lt;username&gt;</code>, <code>&lt;password&gt;</code>, and <code>&lt;dbname&gt;</code> in the connection string with your MongoDB Atlas username, password, and desired database name.</li> </ul>"},{"location":"Session%202/Setting%20up%20MongoDB/#6-connect-using-a-mongodb-client","title":"6. Connect Using a MongoDB Client","text":"<ul> <li>Step:</li> <li>Using MongoDB Compass:<ul> <li>Download and install MongoDB Compass.</li> <li>Open Compass and paste the connection string.</li> <li>Click \"Connect.\"</li> </ul> </li> </ul>"},{"location":"Session%202/Setting%20up%20MongoDB/#7-create-a-database-and-collection","title":"7. Create a Database and Collection","text":"<ul> <li>Step:</li> <li> <p>Once connected, you can create a new database and collection within MongoDB Atlas.</p> </li> <li> <p>Details:</p> </li> <li> <p>Create a Database:</p> <ul> <li>Click on \"Databases\" tab in MongoDB Compass.</li> <li>Click \"Create Database.\"</li> <li>Enter the database name and initial collection name.</li> <li>Click \"Create Database.\"</li> </ul> </li> <li> <p>Create Collections:</p> <ul> <li>Within your database, you can add new collections and manage documents.</li> </ul> </li> </ul>"},{"location":"Session%203/Connecting%20Flask%20with%20MongoDB/","title":"Connecting Flask with MongoDB","text":"<p>Now that we have understood what we want to achieve with our schema, lets connect MongoDB to our flask app we started earlier.</p> <ol> <li> <p>Install Flask-PyMongo     Open a new terminal in the same folder we were working before (make sure to activate the venv) and run the following command:      <pre><code>pip install Flask-PyMongo\n</code></pre></p> </li> <li> <p>Configure Flask to Connect to MongoDB</p> </li> <li> <p>Update <code>app.py</code> to Include MongoDB Configuration:      <pre><code>from flask import Flask\nfrom flask_pymongo import PyMongo\n\napp = Flask(__name__)\n\n# Set up MongoDB configuration\napp.config[\"MONGO_URI\"] = \"mongodb://&lt;YOUR-CONNECTION-STRING&gt;/&lt;YOUR-DATABASE-NAME&gt;\"\n\n# Initialize PyMongo\nmongo = PyMongo(app)\n\n@app.route('/')\ndef home():\n    return \"Hello, Flask and MongoDB!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre></p> </li> <li> <p>Best Practices for Database Connection     Storing your connection string inside the code is considered bad practice and it can be hard to change in the future and can also be compromised in the event of a code leak.</p> </li> <li> <p>Use Environment Variables: Store database connection strings and credentials securely.</p> <ul> <li> <p>Install <code>python-dotenv</code>:      Install the <code>python-dotenv</code> package using the following command:    <pre><code>pip install python-dotenv\n</code></pre></p> </li> <li> <p>Create a <code>.env</code> File:      Create a new file called <code>.env</code> inside the same folder and add your connection string in the following format:    <pre><code>MONGO_URI=mongodb://&lt;YOUR-CONNECTION-STRING&gt;/&lt;YOUR-DATABASE-NAME&gt;\n</code></pre></p> </li> <li> <p>Load Environment Variables in <code>app.py</code>:    <pre><code>import os\nfrom dotenv import load_dotenv\nfrom flask import Flask\nfrom flask_pymongo import PyMongo\n\nload_dotenv()  # Load environment variables from .env file\n\napp = Flask(__name__)\n\n# Set up MongoDB configuration\napp.config[\"MONGO_URI\"] = os.getenv(\"MONGO_URI\")\n\n# Initialize PyMongo\nmongo = PyMongo(app)\n\n@app.route('/')\ndef home():\n    return \"Hello, Flask and MongoDB!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre></p> </li> </ul> </li> </ol> <p>Ensure there are no errors when you run the app now.</p>"},{"location":"Session%203/Designing%20the%20movie%20model%20schema/","title":"Designing the movie model schema","text":""},{"location":"Session%203/Designing%20the%20movie%20model%20schema/#introduction-to-data-modeling","title":"Introduction to Data Modeling","text":"<ul> <li>Concept: Data modeling defines how data is stored and organized in a database.</li> <li>Importance: Enhances data retrieval efficiency, maintains data integrity, and simplifies application maintenance.</li> </ul>"},{"location":"Session%203/Designing%20the%20movie%20model%20schema/#understanding-document-oriented-databases","title":"Understanding Document-Oriented Databases","text":"<ul> <li>MongoDB Documents: Stores data in JSON-like documents (BSON format) that are flexible and schema-less.</li> <li>Collections: Documents are grouped into collections, similar to tables in relational databases.</li> </ul>"},{"location":"Session%203/Designing%20the%20movie%20model%20schema/#identifying-entities-and-relationships","title":"Identifying Entities and Relationships","text":"<ul> <li>Primary Entities: <code>Movies</code>, <code>cast</code>, and <code>reviews</code>.</li> <li>Relationships: <code>Movies</code> have <code>cast</code>s and <code>review</code>s.</li> </ul>"},{"location":"Session%203/Designing%20the%20movie%20model%20schema/#defining-the-movie-schema","title":"Defining the Movie Schema","text":"<ul> <li>Fields: <ul> <li>Title: The name of the movie (string, required).</li> <li>Year: The release year of the movie (number, required).</li> <li>Genre: The genre of the movie (string, required).</li> <li>Director: The director of the movie (string, optional).</li> <li>Cast: An array of objects containing cast member references and their roles.</li> <li>Reviews: An array of embedded review documents.</li> </ul> </li> </ul>"},{"location":"Session%203/Designing%20the%20movie%20model%20schema/#example-movie-document","title":"Example Movie Document","text":"<pre><code>{\n  \"_id\": ObjectId(\"60c72b2f9b1d8b3f0c6e6a2e\"),\n  \"title\": \"Inception\",\n  \"year\": 2010,\n  \"genre\": \"Sci-Fi\",\n  \"director\": \"Christopher Nolan\",\n  \"cast\": [\n    { \"_id\": ObjectId(\"60c72b2f9b1d8b3f0c6e6a2f\"), \"role\": \"Dom Cobb\" },\n    { \"_id\": ObjectId(\"60c72b2f9b1d8b3f0c6e6a30\"), \"role\": \"Arthur\" }\n  ],\n  \"reviews\": [\n    {\n      \"_id\": ObjectId(\"60c72b2f9b1d8b3f0c6e6a31\"),\n      \"user\": \"John Doe\",\n      \"rating\": 5,\n      \"comment\": \"Excellent movie!\"\n    },\n    {\n      \"_id\": ObjectId(\"60c72b2f9b1d8b3f0c6e6a32\"),\n      \"user\": \"Jane Smith\",\n      \"rating\": 4,\n      \"comment\": \"Great visuals and story.\"\n    }\n  ]\n}\n</code></pre>"},{"location":"Session%203/Designing%20the%20movie%20model%20schema/#designing-the-cast-schema","title":"Designing the Cast Schema","text":"<ul> <li>Fields:<ul> <li>Name: The name of the cast member (string, required).</li> <li>Date of Birth: The date of birth of the cast member (date, optional).</li> </ul> </li> <li>Example Cast Document:      <pre><code>{\n  \"_id\": ObjectId(\"60c72b2f9b1d8b3f0c6e6a2f\"),\n  \"name\": \"Leonardo DiCaprio\",\n  \"date_of_birth\": ISODate(\"1974-11-11\")\n}\n</code></pre></li> </ul>"},{"location":"Session%203/Designing%20the%20movie%20model%20schema/#embedding-vs-referencing","title":"Embedding vs. Referencing","text":"<ul> <li>Embedding: Storing related data directly within a single document. Best for data that is often read together.</li> <li>Referencing: Storing related data in separate documents and linking them via ObjectId. Best for data that is shared across multiple documents.</li> <li>Choice: Using embedding for reviews to keep them closely tied to their respective movies, and references for cast members to allow for reuse and maintain normalization.</li> </ul>"},{"location":"Session%203/Designing%20the%20movie%20model%20schema/#querying-with-references-and-embedding","title":"Querying with References and Embedding","text":"<ul> <li> <p>Basic Queries:</p> <ul> <li>Find Movies by Genre:    <pre><code>db.movies.find({ genre: \"Sci-Fi\" })\n</code></pre></li> <li>Find Movies by Year:    <pre><code>db.movies.find({ year: 2010 })\n</code></pre></li> </ul> </li> <li> <p>Advanced Queries:</p> <ul> <li>Find Movies by Cast Member:    <pre><code>// Assuming the cast member's ObjectId is known\nvar castId = ObjectId(\"60c72b2f9b1d8b3f0c6e6a2f\");\ndb.movies.find({ \"cast._id\": castId })\n</code></pre></li> <li>Find Movies by Reviewer:    <pre><code>// Assuming the reviewer's user name is known\nvar userName = \"John Doe\";\ndb.movies.find({ \"reviews.user\": userName })\n</code></pre></li> </ul> </li> <li> <p>Using Aggregation for Joins:</p> <ul> <li>Populate Cast Information:    <pre><code>db.movies.aggregate([\n  { $match: { title: \"Inception\" } },\n  {\n    $lookup: {\n      from: \"cast\",\n      localField: \"cast._id\",\n      foreignField: \"_id\",\n      as: \"castDetails\"\n    }\n  }\n])\n</code></pre></li> </ul> </li> </ul>"},{"location":"Session%203/Designing%20the%20movie%20model%20schema/#benefits-of-using-references-and-embedding","title":"Benefits of Using References and Embedding","text":"<ul> <li>Data Normalization: Avoids data duplication by storing shared data (like cast members) separately.</li> <li>Scalability: Embedding reviews within movies simplifies data retrieval and makes it easier to scale the database as related data grows.</li> <li>Flexibility: Allows for more complex queries and relationships between different entities.</li> </ul>"},{"location":"Session%204/Creating%20basic%20HTML%20templates%20for%20the%20movie%20catalogue/","title":"Creating basic HTML templates for the movie catalogue","text":""},{"location":"Session%204/Creating%20basic%20HTML%20templates%20for%20the%20movie%20catalogue/#base-page","title":"Base Page","text":"<pre><code>&lt;!doctype html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;MongoMastery Project&lt;/title&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\"&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;nav class=\"navbar bg-dark navbar-expand-lg bg-body-tertiary\" data-bs-theme=\"dark\"&gt;\n    &lt;div class=\"container-fluid\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"/\"&gt;Movie Catalogue&lt;/a&gt;\n        &lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n        &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n        &lt;/button&gt;\n        &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n            &lt;ul class=\"navbar-nav\"&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link\" aria-current=\"page\" href=\"/movies\"&gt;Movies&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link\" href=\"/casts\"&gt;Cast&lt;/a&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/nav&gt;\n&lt;div style=\"margin: 1rem;\"&gt;\n&lt;!-- Add Jinja Templating here --&gt;\n&lt;/div&gt;\n\n\n&lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"\nintegrity=\"sha384YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Session%204/Creating%20basic%20HTML%20templates%20for%20the%20movie%20catalogue/#home-page","title":"Home Page","text":"<pre><code>&lt;!-- Add Jinja extending --&gt;\n&lt;h1&gt;Welcome to Movies Catalogue&lt;/h1&gt;\n&lt;p&gt;Select a page from the top bar to go to the page&lt;/p&gt;\n&lt;!-- Close Jinja block --&gt;\n</code></pre>"},{"location":"Session%204/Creating%20basic%20HTML%20templates%20for%20the%20movie%20catalogue/#movies-listing-page","title":"Movies Listing Page","text":"<pre><code>&lt;!-- Jinja Extends --&gt;\n\n&lt;!-- Jinja block --&gt;\n&lt;h1&gt;Movies&lt;/h1&gt;\n&lt;p&gt;Here are a list of all the movies in the database&lt;/p&gt;\n\n&lt;div class=\"col\"&gt;\n  &lt;!-- Jinja Loop --&gt;\n  &lt;div class=\"card mb-3\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h5 class=\"card-title\"&gt;Movie Name&lt;/h5&gt;\n      &lt;p class=\"card-text\"&gt;Sci-Fi&lt;/p&gt;\n      &lt;a href=\"#\" class=\"btn btn-primary\" style=\"width: 100%;\"&gt;View More&lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;!-- Jinja Loop end --&gt;\n&lt;/div&gt;\n\n&lt;!-- Jinja Block end --&gt;\n</code></pre>"},{"location":"Session%204/Creating%20basic%20HTML%20templates%20for%20the%20movie%20catalogue/#movie-information-page","title":"Movie Information Page","text":"<pre><code>{% extends 'base.html' %}\n\n{% block content %}\n&lt;h1&gt;&lt;!-- Movie Name --&gt;&lt;/h1&gt;\n&lt;small&gt;&lt;!-- Movie year --&gt; - &lt;!-- Movie Genre --&gt;&lt;/small&gt;\n&lt;h2&gt;Cast&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt;&lt;!-- Movie Director --&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;!-- Cast informtation for loop jinja --&gt;\n  &lt;!-- &lt;li&gt;Actor Name - Actior Role&lt;/li&gt; --&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Reviews&lt;/h2&gt;\n&lt;ul&gt;\n  &lt;!-- Review information for loop jinja --&gt;\n  &lt;li&gt;\n    &lt;p&gt;&lt;strong&gt;&lt;!-- Reviewer Name --&gt;&lt;/strong&gt;&lt;/p&gt;\n    &lt;p&gt;\u2b50\ufe0f &lt;!-- Print number of stars as per review --&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;!-- Review Content --&gt;&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n{% endblock %}\n</code></pre>"},{"location":"Session%204/Introduction%20to%20Jinja2%20templating%20engine/","title":"Introduction to Jinja2 templating engine","text":""},{"location":"Session%204/Introduction%20to%20Jinja2%20templating%20engine/#basics-of-jinja2","title":"Basics of Jinja2","text":"<ul> <li>What is Jinja2?</li> <li>A templating engine for Python that generates dynamic HTML or other text formats.</li> <li>Integration with Flask:</li> <li>The default templating engine in Flask, allowing seamless dynamic content generation.</li> </ul> <p>Key Features: - Template Inheritance:   - Promotes code reuse by defining a base template and extending it in other templates. - Control Structures:   - Supports conditional statements (<code>if</code>, <code>if-else</code>) and loops (<code>for</code>).</p>"},{"location":"Session%204/Introduction%20to%20Jinja2%20templating%20engine/#control-structures","title":"Control Structures","text":"<ol> <li> <p>If Statement: <pre><code>{% if user %}\n  &lt;p&gt;Welcome back, {{ user }}!&lt;/p&gt;\n{% endif %}\n</code></pre></p> </li> <li> <p>If-Else Statement: <pre><code>{% if user %}\n  &lt;p&gt;Welcome back, {{ user }}!&lt;/p&gt;\n{% else %}\n  &lt;p&gt;Hello, Guest! Please log in.&lt;/p&gt;\n{% endif %}\n</code></pre></p> </li> <li> <p>For Loop: <pre><code>&lt;ul&gt;\n  {% for item in items %}\n    &lt;li&gt;{{ item }}&lt;/li&gt;\n  {% endfor %}\n&lt;/ul&gt;\n</code></pre></p> </li> </ol>"},{"location":"Session%204/Introduction%20to%20Jinja2%20templating%20engine/#template-inheritance","title":"Template Inheritance","text":"<ol> <li> <p>Base Template (<code>base.html</code>): <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;{% block title %}My Website{% endblock %}&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;header&gt;\n      &lt;h1&gt;My Website Header&lt;/h1&gt;\n    &lt;/header&gt;\n\n    &lt;main&gt;\n      {% block content %}{% endblock %}\n    &lt;/main&gt;\n\n    &lt;footer&gt;\n      &lt;p&gt;My Website Footer&lt;/p&gt;\n    &lt;/footer&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> <li> <p>Child Template (<code>index.html</code>): <pre><code>{% extends \"base.html\" %}\n\n{% block title %}Home - My Website{% endblock %}\n\n{% block content %}\n  &lt;h2&gt;Welcome to the Home Page&lt;/h2&gt;\n  &lt;p&gt;This is the content of the home page.&lt;/p&gt;\n{% endblock %}\n</code></pre></p> </li> </ol>"},{"location":"Session%204/Introduction%20to%20Jinja2%20templating%20engine/#benefits-of-jinja2","title":"Benefits of Jinja2","text":"<ul> <li>Separation of Concerns:</li> <li>Separates application logic from presentation logic.</li> <li>Reusability:</li> <li>Reuse common layout elements, enhancing consistency and maintainability.</li> </ul> <p>Jinja2 makes it easy to generate dynamic, reusable, and maintainable HTML by providing powerful features like template inheritance and control structures.</p>"},{"location":"Session%205/Implementing%20Create%20operations%20for%20cast%20and%20reviews/","title":"Implementing Create operations for cast and reviews","text":""},{"location":"Session%205/Implementing%20Create%20operations%20for%20cast%20and%20reviews/#implementation-of-review-creation","title":"Implementation of Review creation","text":"<p>Add a add review button on the movie information page <pre><code>&lt;a href=\"/movies/&lt;!-- Movie ID --&gt;/add_review\"&gt;&lt;button&gt;Add Review&lt;/button&gt;&lt;/a&gt;\n</code></pre></p>"},{"location":"Session%205/Implementing%20Create%20operations%20for%20cast%20and%20reviews/#create-the-html-form","title":"Create the HTML Form:","text":"<ul> <li>Form Fields: User, Rating, Comment.</li> <li>Template (<code>add_review.html</code>): <pre><code>&lt;!-- Jinja extends --&gt;\n         &lt;h1&gt;Add a New Review for &lt;!-- Jinja Movie Name --&gt;&lt;/h1&gt;\n         &lt;form action=\"/movies/(jinja movie id)/add_review\" method=\"post\"&gt;\n           &lt;label for=\"user\"&gt;User:&lt;/label&gt;\n           &lt;input type=\"text\" id=\"user\" name=\"user\" required&gt;&lt;br&gt;\n\n           &lt;label for=\"rating\"&gt;Rating:&lt;/label&gt;\n           &lt;input type=\"number\" id=\"rating\" name=\"rating\" min=\"1\" max=\"5\" required&gt;&lt;br&gt;\n\n           &lt;label for=\"comment\"&gt;Comment:&lt;/label&gt;\n           &lt;textarea id=\"comment\" name=\"comment\"&gt;&lt;/textarea&gt;&lt;br&gt;\n\n           &lt;button type=\"submit\"&gt;Add Review&lt;/button&gt;\n         &lt;/form&gt;\n&lt;!-- Jinja close --&gt;\n</code></pre></li> </ul>"},{"location":"Session%205/Implementing%20Create%20operations%20for%20cast%20and%20reviews/#handle-form-submission-in-flask","title":"Handle Form Submission in Flask","text":"<ul> <li> <p>Route to Display Form: <pre><code>@app.route('/movies/&lt;movie_id&gt;/add_review')\ndef add_review(movie_id):\n    movie = mongo.db.movies.find_one({'_id': ObjectId(movie_id)})\n    return render_template('add_review.html', movie=movie)\n</code></pre></p> </li> <li> <p>Route to Handle Form Submission: <pre><code>@app.route('/movies/&lt;movie_id&gt;/add_review', methods=['POST'])\ndef add_review_post(movie_id):\n    user = request.form['user']\n    rating = request.form['rating']\n    comment = request.form.get('comment')\n\n    review = {\n        'user': user,\n        'rating': rating,\n        'comment': comment\n    }\n\n    mongo.db.movies.update_one(\n        {'_id': ObjectId(movie_id)},\n        {'$push': {'reviews': review}}\n    )\n    return redirect(f'/movies/{movie_id}')\n</code></pre></p> </li> </ul>"},{"location":"Session%205/Implementing%20Create%20operations%20for%20cast%20and%20reviews/#implementation-of-cast-creation","title":"Implementation of Cast creation","text":""},{"location":"Session%205/Implementing%20Create%20operations%20for%20cast%20and%20reviews/#create-the-html-form-to-add-cast","title":"Create the HTML Form to Add Cast","text":"<ul> <li>Form Fields: Name, Date of Birth.</li> <li>Template (<code>add_cast.html</code>):      <pre><code>&lt;!-- Jinja extends code --&gt;\n    &lt;h1&gt;Add a New Cast Member&lt;/h1&gt;\n    &lt;form action=\"/add_cast\" method=\"post\"&gt;\n      &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;&lt;br&gt;\n\n      &lt;label for=\"date_of_birth\"&gt;Date of Birth:&lt;/label&gt;\n      &lt;input type=\"date\" id=\"date_of_birth\" name=\"date_of_birth\" required&gt;&lt;br&gt;\n\n      &lt;button type=\"submit\"&gt;Add Cast Member&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;!-- End Jinja --&gt;\n</code></pre></li> </ul>"},{"location":"Session%205/Implementing%20Create%20operations%20for%20cast%20and%20reviews/#handle-form-submission-in-flask_1","title":"Handle Form Submission in Flask","text":"<ul> <li> <p>Route to Display Form: <pre><code>@app.route('/add_cast')\ndef add_cast():\n    return render_template('add_cast.html')\n</code></pre></p> </li> <li> <p>Route to Handle Form Submission: <pre><code>@app.route('/add_cast', methods=['POST'])\ndef add_cast_post():\n    name = request.form['name']\n    date_of_birth = request.form['date_of_birth']\n\n    cast_member = {\n        'name': name,\n        'date_of_birth': date_of_birth\n    }\n\n    mongo.db.cast.insert_one(cast_member)\n    return redirect('/')\n</code></pre></p> </li> </ul>"},{"location":"Session%205/Implementing%20add%20Movie%20functionality/","title":"Implementing add Movie functionality","text":""},{"location":"Session%205/Implementing%20add%20Movie%20functionality/#add-a-button-to-movies-page","title":"Add a Button to Movies Page","text":"<p>In the <code>movies.html</code> add a button <pre><code>&lt;a href=\"/add_movie\"&gt;&lt;button&gt;Add Movie&lt;/button&gt;&lt;/a&gt;\n</code></pre></p>"},{"location":"Session%205/Implementing%20add%20Movie%20functionality/#create-the-html-form","title":"Create the HTML Form","text":"<ul> <li>Template (<code>add_movie.html</code>): <pre><code>     &lt;!-- Jinja Extends code --&gt;\n         &lt;h1&gt;Add a New Movie&lt;/h1&gt;\n         &lt;form action=\"/add_movie\" method=\"post\"&gt;\n      &lt;label for=\"title\"&gt;Title:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"title\" name=\"title\" required&gt;&lt;br&gt;\n\n      &lt;label for=\"year\"&gt;Year:&lt;/label&gt;\n      &lt;input type=\"number\" id=\"year\" name=\"year\" required&gt;&lt;br&gt;\n\n      &lt;label for=\"genre\"&gt;Genre:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"genre\" name=\"genre\" required&gt;&lt;br&gt;\n\n      &lt;label for=\"director\"&gt;Director:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"director\" name=\"director\"&gt;&lt;br&gt;\n\n      &lt;label for=\"cast\"&gt;Cast:&lt;/label&gt;\n      &lt;div id=\"cast-members\"&gt;\n        &lt;div&gt;\n          &lt;select name=\"cast_member\"&gt;\n            {% for cast in cast_members %}\n              &lt;option value=\"{{ cast._id }}\"&gt;{{ cast.name }}&lt;/option&gt;\n            {% endfor %}\n          &lt;/select&gt;\n          &lt;input type=\"text\" name=\"role\" placeholder=\"Role\"&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;button type=\"button\" onclick=\"addCastMember()\"&gt;Add Another Cast Member&lt;/button&gt;&lt;br&gt;\n\n      &lt;button type=\"submit\"&gt;Add Movie&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      function addCastMember() {\n        var castDiv = document.getElementById('cast-members');\n        var newCast = document.createElement('div');\n        newCast.innerHTML = \\`\n          &lt;select name=\"cast_member\"&gt;\n            {% for cast in cast_members %}\n              &lt;option value=\"{{ cast._id }}\"&gt;{{ cast.name }}&lt;/option&gt;\n            {% endfor %}\n          &lt;/select&gt;\n          &lt;input type=\"text\" name=\"role\" placeholder=\"Role\"&gt;\n        \\`;\n        castDiv.appendChild(newCast);\n      }\n    &lt;/script&gt;\n    &lt;!-- Jinja extends end --&gt;\n</code></pre></li> </ul>"},{"location":"Session%205/Implementing%20add%20Movie%20functionality/#handle-form-submission-in-flask","title":"Handle Form Submission in Flask","text":"<ul> <li> <p>Route to Display Form: <pre><code>@app.route('/add_movie')\ndef add_movie():\n    cast_members = mongo.db.cast.find()\n    return render_template('add_movie.html', cast_members=cast_members)\n</code></pre></p> </li> <li> <p>Route to Handle Form Submission: <pre><code>     @app.route('/add_movie', methods=['POST'])\n    def add_movie_post():\n        title = request.form['title']\n        year = request.form['year']\n        genre = request.form['genre']\n        director = request.form.get('director')\n\n        cast_members = request.form.getlist('cast_member')\n        roles = request.form.getlist('role')\n\n        cast = []\n        for cast_member, role in zip(cast_members, roles):\n            cast.append({\n                '_id': ObjectId(cast_member),\n                'role': role\n            })\n\n        movie = {\n            'title': title,\n            'year': year,\n            'genre': genre,\n            'director': director,\n            'cast': cast,\n            'reviews': []\n        }\n\n        mongo.db.movies.insert_one(movie)\n        return redirect('/movies')\n</code></pre></p> </li> </ul>"},{"location":"Session%206/Implementing%20Update%20and%20Delete%20operations%20for%20movies/","title":"Implementing Update and Delete operations for movies","text":""},{"location":"Session%206/Implementing%20Update%20and%20Delete%20operations%20for%20movies/#update-operation","title":"Update Operation","text":""},{"location":"Session%206/Implementing%20Update%20and%20Delete%20operations%20for%20movies/#display-the-update-form","title":"Display the Update Form:**","text":"<ul> <li>Purpose: Provide a form pre-filled with the current movie details.</li> <li>HTML Template (<code>edit_movie.html</code>):      <pre><code>&lt;!-- Jinja extends --&gt;\n    &lt;h1&gt;Edit Movie&lt;/h1&gt;\n    &lt;form action=\"/movies/{{ movie._id }}/update\" method=\"post\"&gt;\n      &lt;label for=\"title\"&gt;Title:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"title\" name=\"title\" value=\"{{ movie.title }}\" required&gt;&lt;br&gt;\n\n      &lt;label for=\"year\"&gt;Year:&lt;/label&gt;\n      &lt;input type=\"number\" id=\"year\" name=\"year\" value=\"{{ movie.year }}\" required&gt;&lt;br&gt;\n\n      &lt;label for=\"genre\"&gt;Genre:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"genre\" name=\"genre\" value=\"{{ movie.genre }}\" required&gt;&lt;br&gt;\n\n      &lt;label for=\"director\"&gt;Director:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"director\" name=\"director\" value=\"{{ movie.director }}\"&gt;&lt;br&gt;\n\n      &lt;button type=\"submit\"&gt;Update Movie&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;!-- Jinja close --&gt;\n</code></pre></li> </ul>"},{"location":"Session%206/Implementing%20Update%20and%20Delete%20operations%20for%20movies/#handle-update-form-submission-in-flask","title":"Handle Update Form Submission in Flask:**","text":"<ul> <li> <p>Route to Display Update Form: <pre><code>@app.route('/movies/&lt;movie_id&gt;/edit')\ndef edit_movie(movie_id):\n    movie = mongo.db.movies.find_one({'_id': ObjectId(movie_id)})\n    return render_template('edit_movie.html', movie=movie)\n</code></pre></p> </li> <li> <p>Route to Handle Update Submission: <pre><code>@app.route('/movies/&lt;movie_id&gt;/update', methods=['POST'])\ndef update_movie(movie_id):\n    title = request.form['title']\n    year = request.form['year']\n    genre = request.form['genre']\n    director = request.form.get('director')\n\n    mongo.db.movies.update_one(\n        {'_id': ObjectId(movie_id)},\n        {'$set': {\n            'title': title,\n            'year': year,\n            'genre': genre,\n            'director': director\n        }}\n    )\n    return redirect('/')\n</code></pre></p> </li> </ul>"},{"location":"Session%206/Implementing%20Update%20and%20Delete%20operations%20for%20movies/#delete-operation","title":"Delete Operation","text":""},{"location":"Session%206/Implementing%20Update%20and%20Delete%20operations%20for%20movies/#delete-button-in-movie-details-page","title":"Delete Button in Movie Details Page","text":"<ul> <li>HTML Template Snippet: <pre><code>&lt;form action=\"/movies/{{ movie._id }}/delete\" method=\"post\" onsubmit=\"return confirm('Are you sure you want to delete this movie?');\"&gt;\n  &lt;button type=\"submit\"&gt;Delete Movie&lt;/button&gt;\n&lt;/form&gt;\n</code></pre></li> </ul>"},{"location":"Session%206/Implementing%20Update%20and%20Delete%20operations%20for%20movies/#handle-delete-request-in-flask","title":"Handle Delete Request in Flask","text":"<ul> <li>Route to Handle Deletion: <pre><code>@app.route('/movies/&lt;movie_id&gt;/delete', methods=['POST'])\ndef delete_movie(movie_id):\n    mongo.db.movies.delete_one({'_id': ObjectId(movie_id)})\n    return redirect('/movies')\n</code></pre></li> </ul>"}]}